#include <iostream>
//---------------------------------------------------------------------------------
void foo_1(int arrX[],int size);
//---------------------------------------------------------------------------------
void foo_2(int arrX[],int size);
//---------------------------------------------------------------------------------
bool foo_3(int arr[],int size);
//---------------------------------------------------------------------------------
void print_Array(int arrX[],int size);
//---------------------------------------------------------------------------------
int main(){
    //---------------------------------------------------------------------------------
    /*
    1.Задать целочисленный массив,
    состоящий из элементов 0 и 1.
    Например: [ 1, 1, 0, 0, 1, 0, 1, 1, 0, 0 ].
    Написать функцию, заменяющую в принятом массиве 0 на 1, 1 на 0;
    */
    //---------------------------------------------------------------------------------
    const int SIZE = 10;
    int arr_1[SIZE] = { 1, 1, 0, 0, 1, 0, 1, 1, 0, 0 };

    print_Array(arr_1,SIZE);
    foo_1(arr_1,SIZE);
    print_Array(arr_1,SIZE);

    std::cout << "\n";
    //---------------------------------------------------------------------------------
    /*
    2.Задать пустой целочисленный массив размером 8.
    Написать функцию,
    которая с помощью цикла заполнит его значениями 1 4 7 10 13 16 19 22;
    */
    //---------------------------------------------------------------------------------
    const int SIZE_2 = 8;
    int arr_2[SIZE_2] = {0};
    print_Array(arr_2,SIZE_2);
    foo_2(arr_2,SIZE_2);
    print_Array(arr_2,SIZE_2);

    std::cout << "\n";
    //---------------------------------------------------------------------------------
    /*
    3.*Написать метод, в который передается не пустой одномерный целочисленный массив,
    метод должен вернуть истину если в массиве есть место,
    в котором сумма левой и правой части массива равны.
    Примеры:
    checkBalance([1, 1, 1, || 2, 1]) → true,
    checkBalance ([2, 1, 1, 2, 1]) → false,
    checkBalance ([10, || 1, 2, 3, 4]) → true.
    Абстрактная граница показана символами ||, эти символы в массив не входят.
    */
    //---------------------------------------------------------------------------------
    const int SIZE_3 = 5;
    int arr_3[SIZE_3] = {1,1,1,2,1};
    int arr_4[SIZE_3] = {2,1,1,2,1};
    int arr_5[SIZE_3] = {10,1,2,3,4};
    int arr_6[SIZE_3]{0};
    int arr_7[SIZE_3] = {-10,-5,0,5,10};
    int arr_8[SIZE_3] = {40,-5,5,20,20};
    int arr_9[SIZE_3] = {-2,2,0,2,-2};

    print_Array(arr_3,SIZE_3);
    foo_3(arr_3,SIZE_3);

    print_Array(arr_4,SIZE_3);
    foo_3(arr_4,SIZE_3);

    print_Array(arr_5,SIZE_3);
    foo_3(arr_5,SIZE_3);

    print_Array(arr_6,SIZE_3);
    foo_3(arr_6,SIZE_3);

    print_Array(arr_7,SIZE_3);
    foo_3(arr_7,SIZE_3);

    print_Array(arr_8,SIZE_3);
    foo_3(arr_8,SIZE_3);

    print_Array(arr_9,SIZE_3);
    foo_3(arr_9,SIZE_3);
    std::cout << "\n";
    //---------------------------------------------------------------------------------
    /*

    */
    //---------------------------------------------------------------------------------
    std::cout << "\n";
    //---------------------------------------------------------------------------------
	return 0;
}
//---------------------------------------------------------------------------------
void foo_1(int arrX[], int size){
    for(int index{0};index < size; ++index){
        if(arrX[index] == 0 ) {arrX[index] = 1;}
        else if (arrX[index] == 1 ) {arrX[index] = 0;}
    }
}
//---------------------------------------------------------------------------------
void foo_2(int arrX[], int size){
    for(int index{0};index < size; ++index){
        if(index == 0) arrX[index] = 1;
        else arrX[index] = arrX[index - 1] + 3;
    }
}
//---------------------------------------------------------------------------------
bool foo_3(int arr[],int size) {
	const int arr_size = int(sizeof(arr) / sizeof(int));
	int tmp1 = 0;
	int pass_counter = 0;
	for (int i = 0; i < size - 1; i++)
	{
		pass_counter++;
		tmp1 += arr[i];

		int tmp2 = 0;
		for (int j = pass_counter; j < size; j++)
			tmp2 += arr[j];

		if (tmp1 == tmp2) {std::cout << tmp1 << " true " << tmp2 << std::endl; return true;}
	}
	std::cout << "false" << std::endl;
	return false;
}
//---------------------------------------------------------------------------------
void print_Array(int arrX[],int size){
    for(int index{0};index < size; ++index){ std::cout << arrX[index] << "\t";}
    std::cout << std::endl;
}
//---------------------------------------------------------------------------------
